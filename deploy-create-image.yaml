name: deploy image
trigger:
  branches:
    include:
      - main

variables:
  - group: "Credentials"

parameters:
  - name: deploymentType
    displayName: "Select the deployment type"
    type: string
    default: "sub"
    values:
      - tenant
      - mg
      - sub
      - group

  - name: subscriptionId
    displayName: "Azure Subscription"
    type: string
    default: 

  - name: productType
    displayName: "Select the product type"
    type: string
    default: "avd"
    values:
      - avd

  - name: environmentType
    displayName: "Select the environment"
    type: string
    values:
      - prod
      - acc
      - dev
      - test

  - name: location
    displayName: "Select the location"
    type: string
    default: "westeurope"
    values:
      - westeurope
      - northeurope

stages:
  - stage: ValidateInputs
    displayName: "Validate Inputs"
    jobs:
      - job: validate_inputs
        displayName: "Validate Deployment Inputs"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: Bash@3
            displayName: Install System Packages
            inputs:
              targetType: "inline"
              script: |
                sudo apt update
                sudo apt install -y uuid-runtime

          - task: Bash@3
            displayName: Configure Globalization Setting
            inputs:
              targetType: "inline"
              script: echo "##vso[task.setvariable variable=DOTNET_SYSTEM_GLOBALIZATION_INVARIANT]true"

  - stage: Install_Packages_Login
    displayName: "Install packages, login and deploy bicep"
    jobs:
      - job: Install_Packages_Login
        displayName: "Install packages and login"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: Bash@3
            displayName: Azure CLI Login
            inputs:
              targetType: "inline"
              script: |
                # Install Azure CLI
                sudo apt-get update
                sudo apt-get install -y libicu-dev curl
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

                # Login to Azure
                az login --service-principal --username $(AVDPipelines) --password $(Secret) --tenant $(tenantId)

                if [ $? -ne 0 ]; then
                  echo "Azure login failed. Please check the service principal credentials."
                  exit 1
                fi
                echo "Azure login successful."

                # Confirm subscription
                az account show

      - job: CreateImage
        displayName: "Create Image"
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: Install_Packages_Login
        steps:
          - task: Bash@3
            displayName: List and Run the Latest Image
            inputs:
              targetType: "inline"
              script: |
                # Set location shortcode
                case "${{ parameters.location }}" in
                  "westeurope") locationShortCode="weu" ;;
                  "northeurope") locationShortCode="neu" ;;
                  *) echo "Unknown location: ${{ parameters.location }}"; exit 1 ;;
                esac

                resourceGroupName="rg-${{ parameters.productType }}-${{ parameters.environmentType }}-${locationShortCode}"

                # Login to Azure
                az login --service-principal --username $(AVDPipelines) --password $(Secret) --tenant $(tenantId)

                # List image builders in the resource group
                imageList=$(az image builder list -g "$resourceGroupName" --query "[].{Name:name, CreationTime:timeCreated}" -o json)

                if [[ -z "$imageList" || "$imageList" == "[]" ]]; then
                  echo "Error: No image builders found in resource group '$resourceGroupName'"
                  exit 1
                fi

                # Get the latest image
                latestImageName=$(echo "$imageList" | jq -r 'sort_by(.CreationTime) | last | .Name')

                if [[ -z "$latestImageName" ]]; then
                  echo "Error: Could not find the latest image builder in resource group '$resourceGroupName'"
                  exit 1
                fi

                # Run the image builder
                az image builder run -n "$latestImageName" -g "$resourceGroupName" --no-wait

                # Wait for completion
                az image builder wait -n "$latestImageName" -g "$resourceGroupName" --custom "lastRunStatus.runState!='Running'"

                echo "Image creation completed successfully."